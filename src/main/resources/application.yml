#debug: true

springdoc:
  swagger-ui:
    path: /swagger/swagger-ui.html

server:
  port: ${SERVER_PORT:8080}
  servlet:
    context-path: "/api/v1"
  error:
    include-message: always
    include-binding-errors: always
  compression:
    enabled: true

spring:
  web:
    resources:
      add-mappings: false

  application:
    name: car-rental-system

  jackson:
    serialization:
      write-dates-as-timestamps: false

  datasource:
    url: "${DATABASE_URL}"
    username: "${DATABASE_USERNAME}"
    password: "${DATABASE_PASSWORD}"
    driver-class-name: com.mysql.cj.jdbc.Driver
    hikari:
      maximum-pool-size: ${DB_POOL_MAX_SIZE:20}
      minimum-idle: ${DB_POOL_MIN_IDLE:5}
      connection-timeout: 20000
      idle-timeout: 600000
      max-lifetime: 1800000
      leak-detection-threshold: 60000
      validation-timeout: 5000
      initialization-fail-timeout: 1
      pool-name: HikariPool-${spring.application.name}

  jpa:
    hibernate:
      ddl-auto: ${JPA_DDL_AUTO:validate}
    show-sql: ${JPA_SHOW_SQL:false}
    properties:
      hibernate:
        format_sql: true
        jdbc:
          lob:
            non_contextual_creation: true
          batch_size: 20
          order_inserts: true
          order_updates: true
          cache:
            use_second_level_cache: true
        boot:
          allow_jdbc_metadata_access: false
        dialect: org.hibernate.dialect.MySQLDialect
    open-in-view: off

  mail:
    host: "${MAIL_HOST:smtp.gmail.com}"
    port: "${MAIL_PORT:587}"
    username: "${MAIL_USERNAME}"
    password: "${MAIL_PASSWORD}"
    properties:
      mail:
        smtp:
          auth: true
          starttls:
            enable: true
            required: true
          timeout: 5000
          connectiontimeout: 5000
          writetimeout: 5000
      debug: ${MAIL_DEBUG:false}

  servlet:
    multipart:
      max-file-size: "${MAX_FILE_SIZE:10MB}"
      max-request-size: "${MAX_REQUEST_SIZE:10MB}"
      enabled: true

security:
  cors:
    allowed-origins: "${FRONTEND_URL:http://localhost:3000}"

app:
  jwt:
    secret-key: "${SECRET_JWT_KEY}"
    expiration: "${JWT_ACCESS_EXPIRATION}"
    refresh-expiration: "${JWT_REFRESH_EXPIRATION}"
  otp:
    expiration: "${OTP_EXPIRATION:300}"
    code-length: "${OTP_CODE_LENGTH:6}"

cloudinary:
  cloud-name: "${CLOUDINARY_CLOUD_NAME}"
  api-key: "${CLOUDINARY_API_KEY}"
  api-secret: "${CLOUDINARY_API_SECRET}"
